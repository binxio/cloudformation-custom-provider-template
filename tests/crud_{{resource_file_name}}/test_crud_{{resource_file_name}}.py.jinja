"""
basic unit test.
"""
import boto3
import logging
import unittest
from crud_{{resource_file_name}}.base import CrudUnitTestBase
from {{module_name}}.{{resource_file_name}} import {{resource_name}}Provider
import uuid


class CrudUnitTest(CrudUnitTestBase):
    def setUp(self):
        super().setUp()
        self.provider = {{resource_name}}Provider()
        self.handle = self.provider.handle

    def tearDown(self):
        super().tearDown()

    def test_create(self):

        request = self.create_request('Create', Value="Red")
        response = self.handle(request, {})

        self.assertTrue('PhysicalResourceId' in response)
        self.assertEqual('SUCCESS', response['Status'], response['Reason'])
        self.assertEqual('Red', response.get("PhysicalResourceId"))
        self.assertEqual('Red', response["Data"].get("Value"))

        physical_resource_id = response['PhysicalResourceId']
        request = self.create_request('Update', Value="Green", physical_resource_id=physical_resource_id)
        response = self.handle(request, {})
        self.assertEqual('SUCCESS', response['Status'], response['Reason'])
        self.assertEqual('Green', response.get("PhysicalResourceId"))
        self.assertEqual('Green', response["Data"].get("Value"))

        new_physical_resource_id = response['PhysicalResourceId']

        request = self.create_request('Delete', physical_resource_id=physical_resource_id)
        response = self.handle(request, {})
        self.assertEqual('SUCCESS', response['Status'], response['Reason'])

        request = self.create_request('Delete', physical_resource_id=new_physical_resource_id)
        response = self.handle(request, {})
        self.assertEqual('SUCCESS', response['Status'], response['Reason'])


    @staticmethod
    def create_request(request_type, **kwargs) -> dict:
        request_id = uuid.uuid4()
        physical_resource_id = kwargs.get('physical_resource_id', f'initial-{request_id}')
        kwargs.pop('physical_resource_id', None)

        return {
            'RequestType': request_type,
            'ResponseURL': 'https://httpbin.org/put',
            'StackId': 'arn:aws:cloudformation:us-west-2:EXAMPLE/stack-name/guid',
            'RequestId': str(request_id),
            'ResourceType': '{{resource_type_name}}',
            'LogicalResourceId': 'My{{resource_name}}',
            'ResourceProperties': kwargs,
            'PhysicalResourceId': physical_resource_id,
        }

    @staticmethod
    def create_request(request_type, **kwargs) -> dict:
        request_id = uuid.uuid4()
        physical_resource_id = kwargs.get('physical_resource_id', f'initial-{request_id}')
        kwargs.pop('physical_resource_id', None)

        return {
            'RequestType': request_type,
            'ResponseURL': 'https://httpbin.org/put',
            'StackId': 'arn:aws:cloudformation:us-west-2:EXAMPLE/stack-name/guid',
            'RequestId': str(request_id),
            'ResourceType': '{{resource_type_name}}',
            'LogicalResourceId': '{{resource_name}}',
            'ResourceProperties': kwargs,
            'PhysicalResourceId': physical_resource_id,
        }


if __name__ == "__main__":
    unittest.main()
