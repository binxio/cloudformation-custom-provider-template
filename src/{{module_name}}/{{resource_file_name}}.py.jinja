import json
import logging
import os
from botocore.session import Session
from cfn_resource_provider import ResourceProvider
from {{module_name}}.logger import log

"""
jsonschema defining valid request properties for this {{ resource_type_name }}
"""
request_schema = {
    "type": "object",
    "required": ["Value"],
    "properties": {
        "Value": {
            "type": "string",
            "description": "value to store",
            "minLength": 1,
        }
    },
}

class {{resource_name}}Provider(ResourceProvider):
    def __init__(self, botocore_session = None):
        super({{resource_name}}Provider, self).__init__()
        self.request_schema = request_schema

    def is_valid_request(self):
        # add more complex validation here.
        return super().is_valid_request()

    def create(self):
        """
          Create the resource and return the physical resource id
        """
        value = self.get("Value")
        self.set_attribute("Value", value)
        self.physical_resource_id = value
        log.info("created resource with id %s", self.physical_resource_id)

    def update(self):
        """
        update the resource
        """
        log.info("updating resource with id %s", self.physical_resource_id)
        value = self.get("Value")
        self.set_attribute("Value", value)
        self.physical_resource_id = value

    def delete(self):
        """
        remove the resource
        """
        log.info("deleting resource with id %s", self.physical_resource_id)
        self.success("nothing to do")


provider = {{resource_name}}Provider()


def handler(event, context):
    return provider.handle(event, context)
